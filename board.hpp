#ifndef BOARD_HPP
#define Board_HPP
#include <iostream>
#include <vector>

#include "structures.hpp"
namespace sir {
    class Board {
    private:
        std::string name_;
        std::vector<std::vector<Cell>> grid_;
        int dimension_;
        double beta_;
        double gamma_;
        int day_ = 0;
        Counter counter_;
        Counter q_counter_;
        double q_prob_;
        Mode advanced_opt_;
        Quarantine_parameters quarantin_;
        std::vector<Counter> graph_out_quarantine_;
        std::vector<Counter> graph_in_quarantine_;

    public:
       
        Board(std::string c, int n, double b, double y, int inf, Mode adv_opt,
            double q_prob, Quarantine_parameters quarantine);

        ///////////////////////////////////////////////////////////////////////////////////////////
        void copy_(std::vector<std::vector<Sir>>& end);   //Copy a Sir vector in the grid_ vector
        ///////////////////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////////////////
        void counter_quarantine();  //It counts the number of s,i,r,q in the quarantined quarter. Only called for Mode::Quarantine_2 and Mode::Quarantine_1_and_2
        //////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////
        Sir& operator()(int riga, int colonna);  //Returns the state of one element of the grid. Used to initialize infected cells
        //////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////
        void move_();   //Short-range movement.
        //////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////
        void evolve_();  //Evolution of the grid.
        //////////////////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////////////////
        void quarantine_();  //Activates the quarantine in a quarter of the grid.
        ///////////////////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////////////////
        void airplane_();   //Long-range movement.
        ///////////////////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////////////////
        void draw(int& secondi);   //Prints using SFML.  
        ///////////////////////////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////////////////////////////////
        int gen_unif_rand_number(int) const;  //Generates a uniformly distribuited number.
        ///////////////////////////////////////////////////////////////////////////////////////////
    };
}  // namespace sir
#endif
